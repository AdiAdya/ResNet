{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1A7D49QBqqRdz0rj_jPYBrK2givOQkrqo","timestamp":1651085111863},{"file_id":"1mYTur8D8c1VjDjPKQh9XMV-bOKkD3Bt1","timestamp":1651045186380}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"4a841d9972484df9bc5c0bfec703c2b5":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a215ef059a344ac1a8379c08a4be3bfd","IPY_MODEL_919babea3a5b46cfa8b7a89b704cbf96","IPY_MODEL_e7edb80aa2fa41d48c3652033328109c"],"layout":"IPY_MODEL_dc1f1cd50f5647c5b1c219d8a97d8014"}},"a215ef059a344ac1a8379c08a4be3bfd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8f3e11f33f484f14ad3aeaadb689e2e6","placeholder":"​","style":"IPY_MODEL_da20a839efe8463fa2e911ccff52721f","value":""}},"919babea3a5b46cfa8b7a89b704cbf96":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_5bec453650334ae28c646dafcaf3ff5d","max":170498071,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8c0e7ecd5d554532ad1571a0cbe06bba","value":170498071}},"e7edb80aa2fa41d48c3652033328109c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_399f6b5808ed42d488f3d2ef2fa8caa4","placeholder":"​","style":"IPY_MODEL_420eaf319ac44110aa287ce0d5b053ea","value":" 170499072/? [00:06&lt;00:00, 32061616.89it/s]"}},"dc1f1cd50f5647c5b1c219d8a97d8014":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8f3e11f33f484f14ad3aeaadb689e2e6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"da20a839efe8463fa2e911ccff52721f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5bec453650334ae28c646dafcaf3ff5d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8c0e7ecd5d554532ad1571a0cbe06bba":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"399f6b5808ed42d488f3d2ef2fa8caa4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"420eaf319ac44110aa287ce0d5b053ea":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["### Deep Learning - Mini Project 1"],"metadata":{"id":"kN0NsJvQl9m9"}},{"cell_type":"code","source":["import numpy as np\n","import torch\n","from torch import nn\n","from torchsummary import summary\n","import torchvision\n","import torchvision.transforms as transforms\n","import torch.nn.functional as F"],"metadata":{"id":"d07zFtmQSLZV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Using GPU"],"metadata":{"id":"dtuKl8e9mVKZ"}},{"cell_type":"code","source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"metadata":{"id":"V8UnxgvckaoN","colab":{"base_uri":"https://localhost:8080/"},"outputId":"25187cce-30c2-47d3-a126-db034c093249","executionInfo":{"status":"ok","timestamp":1651085172858,"user_tz":240,"elapsed":4,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n"]}]},{"cell_type":"markdown","source":["#### Model Class"],"metadata":{"id":"yFaIsy1_mY2A"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1YDPxLylIsLi"},"outputs":[],"source":["class BasicBlock(nn.Module):\n","\n","    def __init__(self, in_planes, planes, stride=1):\n","\n","        super(BasicBlock, self).__init__()\n","\n","        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=5,\n","                               stride=stride, padding=2, bias=False)\n","        self.bn1 = nn.BatchNorm2d(planes)\n","        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3,\n","                               stride=1, padding=1, bias=False)\n","        self.bn2 = nn.BatchNorm2d(planes)\n","\n","        self.shortcut = nn.Sequential()\n","        if stride != 1 or in_planes != planes:\n","            self.shortcut = nn.Sequential(\n","                nn.Conv2d(in_planes, planes, kernel_size=1,\n","                          stride=stride, padding=0, bias=False),\n","                nn.BatchNorm2d(planes)\n","            )\n","\n","    def forward(self, x):\n","        out = F.relu(self.bn1(self.conv1(x)))\n","        out = self.bn2(self.conv2(out))\n","        out += self.shortcut(x)\n","        out = F.relu(out)\n","        return out\n","\n","\n","class ResNet(nn.Module):\n","    def __init__(self, block, num_blocks, num_classes=10):\n","        super(ResNet, self).__init__()\n","        self.in_planes = 32\n","\n","        self.conv1 = nn.Conv2d(3, 32, kernel_size=3,\n","                               stride=1, padding=1, bias=False)\n","        self.bn1 = nn.BatchNorm2d(32)\n","        self.layer1 = self._make_layer(block, 32, num_blocks[0], stride=1)\n","        self.layer2 = self._make_layer(block, 64, num_blocks[1], stride=2)\n","        self.layer3 = self._make_layer(block, 128, num_blocks[2], stride=2)\n","        self.layer4 = self._make_layer(block, 256, num_blocks[3], stride=2)\n","        self.linear = nn.Linear(256, num_classes)\n","\n","    def _make_layer(self, block, planes, num_blocks, stride):\n","        strides = [stride] + [1]*(num_blocks-1)\n","        layers = []\n","        for stride in strides:\n","            layers.append(block(self.in_planes, planes, stride))\n","            self.in_planes = planes\n","        return nn.Sequential(*layers)\n","\n","    def forward(self, x):\n","        out = F.relu(self.bn1(self.conv1(x)))\n","        out = self.layer1(out)\n","        out = self.layer2(out)\n","        out = self.layer3(out)\n","        out = self.layer4(out)\n","        out = F.avg_pool2d(out, 4)\n","        out = out.view(out.size(0), -1)\n","        out = self.linear(out)\n","        return out\n","\n","def project1_model():\n","    return ResNet(BasicBlock, [2, 2, 2, 2])"]},{"cell_type":"markdown","source":["#### Model Instantiation"],"metadata":{"id":"z5ewbmpcmfUK"}},{"cell_type":"code","source":["model = project1_model().cuda()"],"metadata":{"id":"W9jG0N9dmeaE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Model Summary"],"metadata":{"id":"-zJhzsu5m3Do"}},{"cell_type":"code","source":["summary(model, (3,32,32))"],"metadata":{"id":"RtZdbsjEKttd","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8c0ba0f1-dd12-4084-fbe3-810048b15169","executionInfo":{"status":"ok","timestamp":1651085942447,"user_tz":240,"elapsed":261,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1           [-1, 32, 32, 32]             864\n","       BatchNorm2d-2           [-1, 32, 32, 32]              64\n","            Conv2d-3           [-1, 32, 32, 32]          25,600\n","       BatchNorm2d-4           [-1, 32, 32, 32]              64\n","            Conv2d-5           [-1, 32, 32, 32]           9,216\n","       BatchNorm2d-6           [-1, 32, 32, 32]              64\n","        BasicBlock-7           [-1, 32, 32, 32]               0\n","            Conv2d-8           [-1, 32, 32, 32]          25,600\n","       BatchNorm2d-9           [-1, 32, 32, 32]              64\n","           Conv2d-10           [-1, 32, 32, 32]           9,216\n","      BatchNorm2d-11           [-1, 32, 32, 32]              64\n","       BasicBlock-12           [-1, 32, 32, 32]               0\n","           Conv2d-13           [-1, 64, 16, 16]          51,200\n","      BatchNorm2d-14           [-1, 64, 16, 16]             128\n","           Conv2d-15           [-1, 64, 16, 16]          36,864\n","      BatchNorm2d-16           [-1, 64, 16, 16]             128\n","           Conv2d-17           [-1, 64, 16, 16]           2,048\n","      BatchNorm2d-18           [-1, 64, 16, 16]             128\n","       BasicBlock-19           [-1, 64, 16, 16]               0\n","           Conv2d-20           [-1, 64, 16, 16]         102,400\n","      BatchNorm2d-21           [-1, 64, 16, 16]             128\n","           Conv2d-22           [-1, 64, 16, 16]          36,864\n","      BatchNorm2d-23           [-1, 64, 16, 16]             128\n","       BasicBlock-24           [-1, 64, 16, 16]               0\n","           Conv2d-25            [-1, 128, 8, 8]         204,800\n","      BatchNorm2d-26            [-1, 128, 8, 8]             256\n","           Conv2d-27            [-1, 128, 8, 8]         147,456\n","      BatchNorm2d-28            [-1, 128, 8, 8]             256\n","           Conv2d-29            [-1, 128, 8, 8]           8,192\n","      BatchNorm2d-30            [-1, 128, 8, 8]             256\n","       BasicBlock-31            [-1, 128, 8, 8]               0\n","           Conv2d-32            [-1, 128, 8, 8]         409,600\n","      BatchNorm2d-33            [-1, 128, 8, 8]             256\n","           Conv2d-34            [-1, 128, 8, 8]         147,456\n","      BatchNorm2d-35            [-1, 128, 8, 8]             256\n","       BasicBlock-36            [-1, 128, 8, 8]               0\n","           Conv2d-37            [-1, 256, 4, 4]         819,200\n","      BatchNorm2d-38            [-1, 256, 4, 4]             512\n","           Conv2d-39            [-1, 256, 4, 4]         589,824\n","      BatchNorm2d-40            [-1, 256, 4, 4]             512\n","           Conv2d-41            [-1, 256, 4, 4]          32,768\n","      BatchNorm2d-42            [-1, 256, 4, 4]             512\n","       BasicBlock-43            [-1, 256, 4, 4]               0\n","           Conv2d-44            [-1, 256, 4, 4]       1,638,400\n","      BatchNorm2d-45            [-1, 256, 4, 4]             512\n","           Conv2d-46            [-1, 256, 4, 4]         589,824\n","      BatchNorm2d-47            [-1, 256, 4, 4]             512\n","       BasicBlock-48            [-1, 256, 4, 4]               0\n","           Linear-49                   [-1, 10]           2,570\n","================================================================\n","Total params: 4,894,762\n","Trainable params: 4,894,762\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.01\n","Forward/backward pass size (MB): 5.63\n","Params size (MB): 18.67\n","Estimated Total Size (MB): 24.31\n","----------------------------------------------------------------\n"]}]},{"cell_type":"markdown","source":["Number of Trainable Parameters"],"metadata":{"id":"pqQ8t2cWnAlc"}},{"cell_type":"code","source":["def count_parameters(model):\n","    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n","    # torch.numel() returns number of elements in a tensor\n","\n","print(count_parameters(model))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ikZY3XXSUSng","outputId":"0f02db48-e5b6-4cb7-bbb6-c82072029690","executionInfo":{"status":"ok","timestamp":1651085953049,"user_tz":240,"elapsed":238,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4894762\n"]}]},{"cell_type":"markdown","source":["#### Data with Augmentation\n","\n"],"metadata":{"id":"On7LCkKCnJjn"}},{"cell_type":"code","source":["standard_transform = transforms.Compose([\n","                                         transforms.ToTensor(),\n","                                         transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261])\n","                                         ])\n","\n","# Just Horizontal Flip\n","augment_transform1 = transforms.Compose([\n","                                         transforms.ToTensor(),\n","                                         transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261]),\n","                                         transforms.RandomHorizontalFlip(p=1.0),\n","                                         ])\n","\n","# Zoom-out\n","augment_transform2 = transforms.Compose([\n","                                         transforms.ToTensor(),\n","                                         transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261]),\n","                                         transforms.RandomHorizontalFlip(),\n","                                         transforms.RandomCrop(32, padding=4)\n","                                         ])\n","\n","\n","\n","# Zoom-in\n","augment_transform3 = transforms.Compose([\n","                                         transforms.ToTensor(),\n","                                         transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261]),\n","                                         transforms.RandomHorizontalFlip(),\n","                                         transforms.Resize(size=(36, 36)),\n","                                         transforms.RandomCrop(32)\n","                                         ])\n","\n","# Rotation\n","augment_transform4 = transforms.Compose([\n","                                         transforms.ToTensor(),\n","                                         transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261]),\n","                                         transforms.RandomHorizontalFlip(),\n","                                         transforms.RandomRotation(90),\n","                                         ])\n","\n","# Color Jitter\n","augment_transform5 = transforms.Compose([\n","                                         transforms.ToTensor(),\n","                                         transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261]),\n","                                         transforms.ColorJitter(brightness=0.5, contrast=0.5, saturation=0.5, hue=0.5),\n","                                         transforms.RandomHorizontalFlip(),\n","                                         ])\n","\n","\n","\n","\n","standardtrainingdata = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=True,transform=standard_transform)\n","augmentedtrainingdata1 = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=False,transform=augment_transform1)\n","augmentedtrainingdata2 = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=False,transform=augment_transform2)\n","augmentedtrainingdata3 = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=False,transform=augment_transform3)\n","augmentedtrainingdata4 = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=False,transform=augment_transform4)\n","augmentedtrainingdata5 = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=False,transform=augment_transform5)\n","# augmentedtrainingdata6 = torchvision.datasets.CIFAR10('./CIFAR10/',train=True,download=False,transform=augment_transform6)\n","\n","trainingdata = torch.utils.data.ConcatDataset([standardtrainingdata,\n","                                               augmentedtrainingdata1,\n","                                               augmentedtrainingdata2,\n","                                               augmentedtrainingdata3,\n","                                               augmentedtrainingdata4,\n","                                               augmentedtrainingdata5,\n","                                              #  augmentedtrainingdata6,\n","                                               ])\n","testdata = torchvision.datasets.CIFAR10('./CIFAR10/',train=False,download=False,transform=standard_transform)\n","\n","trainDataLoader = torch.utils.data.DataLoader(trainingdata,batch_size=32,shuffle=True, num_workers=2, pin_memory=True)\n","testDataLoader = torch.utils.data.DataLoader(testdata,batch_size=64,shuffle=False, num_workers=2, pin_memory=True)"],"metadata":{"id":"c7T4uZhGLHxk","colab":{"base_uri":"https://localhost:8080/","height":85,"referenced_widgets":["4a841d9972484df9bc5c0bfec703c2b5","a215ef059a344ac1a8379c08a4be3bfd","919babea3a5b46cfa8b7a89b704cbf96","e7edb80aa2fa41d48c3652033328109c","dc1f1cd50f5647c5b1c219d8a97d8014","8f3e11f33f484f14ad3aeaadb689e2e6","da20a839efe8463fa2e911ccff52721f","5bec453650334ae28c646dafcaf3ff5d","8c0e7ecd5d554532ad1571a0cbe06bba","399f6b5808ed42d488f3d2ef2fa8caa4","420eaf319ac44110aa287ce0d5b053ea"]},"outputId":"fb9ce0bd-42bb-4278-dcd1-2aa2c771eee2","executionInfo":{"status":"ok","timestamp":1651085966544,"user_tz":240,"elapsed":12583,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./CIFAR10/cifar-10-python.tar.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/170498071 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4a841d9972484df9bc5c0bfec703c2b5"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./CIFAR10/cifar-10-python.tar.gz to ./CIFAR10/\n"]}]},{"cell_type":"markdown","source":["#### Loss Metric and Optimizer (Cross Entropy and ADAM)"],"metadata":{"id":"aMegjxgHoQMc"}},{"cell_type":"code","source":["import torch.optim as optim\n","\n","# Loss\n","criterion = nn.CrossEntropyLoss()\n","\n","# Optimizer\n","lr = 0.1\n","momentum = 0.9\n","milestones = [15,25,35,45]\n","gamma = 0.1\n","weight_decay = 0.0001\n","\n","optimizer = optim.SGD(\n","                      model.parameters(),\n","                      lr=lr,\n","                      momentum=momentum,\n","                      weight_decay=weight_decay,\n","                      )\n","\n","scheduler = optim.lr_scheduler.MultiStepLR(optimizer=optimizer, milestones=milestones, gamma=gamma)"],"metadata":{"id":"WtdONLran2Vo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_loss_history = []\n","test_loss_history = []\n","train_acc_history = []\n","test_acc_history = []\n","\n","EPOCHS = 50\n","\n","best_accuracy = 0.0\n","\n","for epoch in range(EPOCHS):\n","    train_loss = 0.0\n","    test_loss = 0.0\n","    train_acc = 0.0\n","    test_acc = 0.0\n","\n","    model.train()\n","    for i, data in enumerate(trainDataLoader):\n","        images, labels = data\n","        images = images.cuda()\n","        labels = labels.cuda()\n","        optimizer.zero_grad()\n","        output = model(images)\n","        _, predictions = torch.max(output, 1)\n","        fit = criterion(output,labels)\n","        fit.backward()\n","        optimizer.step()\n","        train_loss += fit.item()\n","        train_acc += torch.sum(predictions == labels.data)\n","    scheduler.step()\n","\n","    model.eval()\n","    for i, data in enumerate(testDataLoader):\n","        with torch.no_grad():\n","            images, labels = data\n","            images = images.cuda()\n","            labels = labels.cuda()\n","            output = model(images)\n","            _, predictions = torch.max(output, 1)\n","            fit = criterion(output,labels)\n","            test_loss += fit.item()\n","            test_acc += torch.sum(predictions == labels.data)\n","\n","    train_loss = train_loss/len(trainDataLoader)\n","    test_loss = test_loss/len(testDataLoader)\n","    train_loss_history.append(train_loss)\n","    test_loss_history.append(test_loss)\n","    train_acc = (train_acc.float() / len(trainDataLoader.dataset)).item()\n","    test_acc = (test_acc.float() / len(testDataLoader.dataset)).item()\n","\n","    train_acc_history += [train_acc]\n","    test_acc_history += [test_acc]\n","    print('Epoch %s, Train Loss: %s, Test loss %s, Test acc %s'%(epoch, np.round(train_loss, 5), np.round(test_loss, 5), np.round(test_acc, 5)))\n","\n","    if (test_acc >= 0.94) and (test_acc > best_accuracy):\n","        best_accuracy = test_acc\n","        torch.save(model.state_dict(), 'res.pt')\n","        print(\"Model Saved... Accuracy = \" + str(test_acc))"],"metadata":{"id":"LqcODIBOS82-","outputId":"dec3b557-39b5-4cbd-a598-81fc3ef1d5e0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651098155112,"user_tz":240,"elapsed":12183103,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0, Train Loss: 1.29463, Test loss 0.65258, Test acc 0.7758\n","Epoch 1, Train Loss: 0.71683, Test loss 0.52402, Test acc 0.8218\n","Epoch 2, Train Loss: 0.61338, Test loss 0.57023, Test acc 0.8112\n","Epoch 3, Train Loss: 0.57084, Test loss 0.50089, Test acc 0.8349\n","Epoch 4, Train Loss: 0.54609, Test loss 0.45399, Test acc 0.8433\n","Epoch 5, Train Loss: 0.5296, Test loss 0.4107, Test acc 0.8615\n","Epoch 6, Train Loss: 0.51837, Test loss 0.4357, Test acc 0.851\n","Epoch 7, Train Loss: 0.50951, Test loss 0.46521, Test acc 0.8453\n","Epoch 8, Train Loss: 0.50244, Test loss 0.41628, Test acc 0.8595\n","Epoch 9, Train Loss: 0.49814, Test loss 0.42662, Test acc 0.8509\n","Epoch 10, Train Loss: 0.4945, Test loss 0.47704, Test acc 0.8408\n","Epoch 11, Train Loss: 0.49179, Test loss 0.38977, Test acc 0.8686\n","Epoch 12, Train Loss: 0.48965, Test loss 0.41375, Test acc 0.8557\n","Epoch 13, Train Loss: 0.48663, Test loss 0.39915, Test acc 0.8659\n","Epoch 14, Train Loss: 0.48521, Test loss 0.43224, Test acc 0.8579\n","Epoch 15, Train Loss: 0.25542, Test loss 0.22208, Test acc 0.9247\n","Epoch 16, Train Loss: 0.19249, Test loss 0.22724, Test acc 0.9252\n","Epoch 17, Train Loss: 0.16589, Test loss 0.23447, Test acc 0.9235\n","Epoch 18, Train Loss: 0.15179, Test loss 0.24904, Test acc 0.9242\n","Epoch 19, Train Loss: 0.14562, Test loss 0.26632, Test acc 0.9211\n","Epoch 20, Train Loss: 0.14581, Test loss 0.27109, Test acc 0.9174\n","Epoch 21, Train Loss: 0.1448, Test loss 0.25352, Test acc 0.9206\n","Epoch 22, Train Loss: 0.14702, Test loss 0.27053, Test acc 0.9171\n","Epoch 23, Train Loss: 0.14614, Test loss 0.27946, Test acc 0.9152\n","Epoch 24, Train Loss: 0.14774, Test loss 0.25978, Test acc 0.9213\n","Epoch 25, Train Loss: 0.08127, Test loss 0.21847, Test acc 0.9342\n","Epoch 26, Train Loss: 0.06141, Test loss 0.22338, Test acc 0.9341\n","Epoch 27, Train Loss: 0.05246, Test loss 0.22607, Test acc 0.9373\n","Epoch 28, Train Loss: 0.04695, Test loss 0.23089, Test acc 0.9345\n","Epoch 29, Train Loss: 0.04183, Test loss 0.2375, Test acc 0.9346\n","Epoch 30, Train Loss: 0.03874, Test loss 0.23991, Test acc 0.9357\n","Epoch 31, Train Loss: 0.03601, Test loss 0.24105, Test acc 0.935\n","Epoch 32, Train Loss: 0.03323, Test loss 0.24488, Test acc 0.9366\n","Epoch 33, Train Loss: 0.03119, Test loss 0.24734, Test acc 0.9369\n","Epoch 34, Train Loss: 0.02896, Test loss 0.25161, Test acc 0.9357\n","Epoch 35, Train Loss: 0.02588, Test loss 0.25014, Test acc 0.9351\n","Epoch 36, Train Loss: 0.02462, Test loss 0.24876, Test acc 0.9355\n","Epoch 37, Train Loss: 0.02417, Test loss 0.25147, Test acc 0.9355\n","Epoch 38, Train Loss: 0.02275, Test loss 0.24832, Test acc 0.9359\n","Epoch 39, Train Loss: 0.02304, Test loss 0.24821, Test acc 0.9356\n","Epoch 40, Train Loss: 0.02222, Test loss 0.24471, Test acc 0.9368\n","Epoch 41, Train Loss: 0.02268, Test loss 0.24747, Test acc 0.9378\n","Epoch 42, Train Loss: 0.02206, Test loss 0.24896, Test acc 0.9381\n","Epoch 43, Train Loss: 0.02195, Test loss 0.24834, Test acc 0.9369\n","Epoch 44, Train Loss: 0.02162, Test loss 0.24612, Test acc 0.9382\n","Epoch 45, Train Loss: 0.02195, Test loss 0.24479, Test acc 0.9376\n","Epoch 46, Train Loss: 0.0219, Test loss 0.24802, Test acc 0.9374\n","Epoch 47, Train Loss: 0.02097, Test loss 0.24621, Test acc 0.9374\n","Epoch 48, Train Loss: 0.02104, Test loss 0.24549, Test acc 0.9375\n","Epoch 49, Train Loss: 0.02099, Test loss 0.24744, Test acc 0.9375\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.plot(train_loss_history)\n","plt.plot(test_loss_history)\n","plt.legend([\"train\", \"val\"])\n","plt.title(\"Loss\")"],"metadata":{"id":"40V3igPVU5B1","colab":{"base_uri":"https://localhost:8080/","height":300},"outputId":"a95c2634-4448-46d9-8e42-ce7c79143d95","executionInfo":{"status":"ok","timestamp":1651098998962,"user_tz":240,"elapsed":584,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Loss')"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.plot(train_acc_history)\n","plt.plot(test_acc_history)\n","plt.legend([\"train\", \"val\"])\n","plt.title(\"Acc\")\n"],"metadata":{"id":"Z_2Kb__XqBRU","colab":{"base_uri":"https://localhost:8080/","height":300},"outputId":"3f8418ea-7a61-402b-e56f-f0f8cfa8fd49","executionInfo":{"status":"ok","timestamp":1651099001754,"user_tz":240,"elapsed":295,"user":{"displayName":"Faiz Andrea Ganz","userId":"07639753498586550069"}}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Acc')"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["torch.save(model.state_dict(), 'res32b.pt')"],"metadata":{"id":"GUUHnb718lhJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"g5smMMn79VIk"},"execution_count":null,"outputs":[]}]}